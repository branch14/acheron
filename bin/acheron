#!/usr/bin/env ruby
#/
#/ Usage: acheron <cmd> [daemon-options] -- [options]
#/
#/ Options:
#/
#/   -x, --exchange <rabbitmq-exchange> (default: 'acheron')
#/
#/   -c, --channel <slack-channel> (default: '#acheron')
#/
#/   -t, --token <slack-token> (no default)
#/
#/   -u, --username <slack-username (default: 'Acheron'>
#/
#/   -i, --icon_emoji <slack-icon-emoji> (default: ':space_invader:')
#/
#/   -f, --configfile <config-file> (default: './acheron.yml')
#/
#/   -p, --piddir <pid-directory> (default: '/var/run')
#/
#/
#/ Configuration:
#/
#/   Defaults <- Config file <- ENV <- CLI
#/

$stderr.sync = true

require 'optparse'
require 'yaml'
require 'pp'

require 'trickery/hash/deep_merge'
require 'trickery/hash/deep_ostruct'

require 'daemons'

require File.expand_path(File.join(%w(.. .. lib acheron)), __FILE__)

# default options
default_opts = {
  configfile: File.expand_path('acheron.yml', Dir.pwd),
  piddir: '/var/run',
  slack: {
    channel: '#acheron',
    username: 'Acheron',
    icon_emoji: ':space_invader:'
  },
  rabbitmq: {
    exchange: 'acheron'
  }
}

# parse options from cli
cli_opts = Hash.new { |h,k| h[k] = Hash.new(&h.default_proc) }
ARGV.options do |o|
  o.on("-f", "--configfile=val", String) { |val| cli_opts[:configfile] = val }
  o.on("-p", "--piddir=val", String)     { |val| cli_opts[:piddir] = val }
  o.on("-c", "--channel=val", String)    { |val| cli_opts[:slack][:channel] = val }
  o.on("-u", "--username=val", String)   { |val| cli_opts[:slack][:username] = val }
  o.on("-i", "--icon_emoji=val", String) { |val| cli_opts[:slack][:icon_emoji] = val }
  o.on("-t", "--token=val", String)      { |val| cli_opts[:slack][:token] = val }
  o.on("-x", "--exchange=val", String)   { |val| cli_opts[:rabbitmq][:exchange] = val }

  o.on_tail("-h", "--help") { exec "grep ^#/<'#{__FILE__}'|cut -c4-" }
  o.parse!
end

# load options from env
env_opts = {
  configfile: ENV['ACHERON_CONFIGFILE'],
  piddir: ENV['ACHERON_PIDDIR'],
  slack: {
    channel: ENV['ACHERON_SLACK_CHANNEL'],
    username: ENV['ACHERON_SLACK_USERNAME'],
    icon_emoji: ENV['ACHERON_SLACK_ICON_EMOJI'],
    token: ENV['ACHERON_SLACK_TOKEN']
  },
  rabbitmq: {
    exchange: ENV['ACHERON_RABBITMQ_EXCHANGE']
  }
}

# merge config i
config = default_opts.deep_merge(env_opts, cli_opts)

# load options from file
file_opts = {}
if File.exist?(config[:configfile])
  file_opts = YAML.load(File.read(config[:configfile]))
else
  warn "Unable to read config file at #{config[:config_file]}"
end

# merge config ii
config = default_opts.deep_merge(file_opts, env_opts, cli_opts)

# daemonize
Daemons.run_proc(File.basename(__FILE__), dir: config[:piddir]) do
  sts = Acheron::Exec.new(config.deep_ostruct)
  puts 'Acheron is ready to slack.'
  sts.run
end
